#include "GameObjectManager.h"

GameObjectManager::~GameObjectManager() {
}

GameObjectManager* GameObjectManager::GetInstance() {
	static GameObjectManager instance;
	return &instance;
}

void GameObjectManager::Finalize() {
	bombList_.clear();
}

//////////////////////////////////////////////////////////////////////////////////////////////////
// ↓　
//////////////////////////////////////////////////////////////////////////////////////////////////

void GameObjectManager::Init() {
}

//////////////////////////////////////////////////////////////////////////////////////////////////
// ↓　
//////////////////////////////////////////////////////////////////////////////////////////////////

void GameObjectManager::Update() {
	bombList_.remove_if([](auto& bomb) {return !bomb->GetIsAlive(); });
	for (auto& bomb : bombList_) {
		bomb->Update();
	}
}

//////////////////////////////////////////////////////////////////////////////////////////////////
// ↓　
//////////////////////////////////////////////////////////////////////////////////////////////////

void GameObjectManager::Draw() const {
	for (auto& bomb : bombList_) {
		bomb->Draw();
	}
}

//////////////////////////////////////////////////////////////////////////////////////////////////
// ↓　
//////////////////////////////////////////////////////////////////////////////////////////////////

void GameObjectManager::DrawUI() const {
	
}

//////////////////////////////////////////////////////////////////////////////////////////////////
// ↓　
/////////////////////////////////////////////////////////////////////////////////////////////////

void GameObjectManager::PopBomb(const Vector3& popPos, const Vector3& acceleration) {
	GetInstance()->AddBomb(popPos, acceleration);
}

//////////////////////////////////////////////////////////////////////////////////////////////////
// ↓　
/////////////////////////////////////////////////////////////////////////////////////////////////

void GameObjectManager::AddBomb(const Vector3& popPos, const Vector3& acceleration) {
	auto& newBomb = bombList_.emplace_back(std::make_unique<Bomb>());
	newBomb->Init();
	newBomb->Pop(popPos, acceleration);
}

//////////////////////////////////////////////////////////////////////////////////////////////////
// ↓　
/////////////////////////////////////////////////////////////////////////////////////////////////

#ifdef _DEBUG
void GameObjectManager::Debug_Draw() {
	for (auto& bomb : bombList_) {
		bomb->Debug_Draw();
	}
}
#endif