#include "BossActionShotLauncher.h"
#include "Engine/Lib/Json/JsonItems.h"
#include "Game/Actor/Boss/Boss.h"
#include "Game/Actor/Boss/Bullet/BossMissile.h"
#include "Game/UI/Boss/BossUIs.h"

BehaviorStatus BossActionShotLauncher::Execute() {
	return Action();
}

float BossActionShotLauncher::EvaluateWeight() {
	return 0.5f;
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 編集処理
///////////////////////////////////////////////////////////////////////////////////////////////

void BossActionShotLauncher::Debug_Gui() {
	ITaskNode::Debug_Gui();
	param_.Debug_Gui();
}

void BossActionShotLauncher::Parameter::Debug_Gui() {
	ImGui::DragFloat("bulletSpeed", &bulletSpeed, .1f);
	ImGui::DragFloat("stiffenTime", &stiffenTime, .1f);

	SaveAndLoad();
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 終了確認
///////////////////////////////////////////////////////////////////////////////////////////////

bool BossActionShotLauncher::IsFinish() {
	if (isFinish_) {
		return true;
	}
	return false;
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 実行確認
///////////////////////////////////////////////////////////////////////////////////////////////

bool BossActionShotLauncher::CanExecute() {
	return true;
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 初期化処理
///////////////////////////////////////////////////////////////////////////////////////////////

void BossActionShotLauncher::Init() {
	param_.SetGroupName("BossAction");
	param_.Load();
	
	Shot();

	isFinish_ = true;

	// 警告を出す
	pTarget_->GetUIs()->PopAlert();
	pTarget_->SetIsAttack(false);
	pTarget_->LogAI(GetNodeName());
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 更新処理
///////////////////////////////////////////////////////////////////////////////////////////////

void BossActionShotLauncher::Update() {
	taskTimer_ += GameTimer::DeltaTime();

	if (taskTimer_ > param_.stiffenTime) {
		isFinish_ = true;
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 終了処理
///////////////////////////////////////////////////////////////////////////////////////////////

void BossActionShotLauncher::End() {
	pTarget_->SetIsAttack(true);
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ main Action
///////////////////////////////////////////////////////////////////////////////////////////////

void BossActionShotLauncher::Shot() {
	Vector3 pos = pTarget_->GetPosition();
	Vector3 velocity = (pTarget_->GetPlayerPosition() - pos).Normalize();
	BossMissile* bullet = pTarget_->GetBulletManager()->AddBullet<BossMissile>(pos, velocity, pTarget_->GetPlayerPosition(), param_.bulletSpeed, 0.0f, false);
	bullet->SetTakeDamage(40.0f);
}