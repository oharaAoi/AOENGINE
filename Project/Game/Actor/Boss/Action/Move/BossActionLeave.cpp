#include "BossActionLeave.h"
#include "Engine/Lib/Json/JsonItems.h"
#include "Game/Actor/Boss/Boss.h"
#include "Game/Actor/Boss/Action/BossActionIdle.h"

void BossActionLeave::Debug_Gui() {
	ImGui::DragFloat("moveSpeed", &param_.moveSpeed, 0.1f);
	ImGui::DragFloat("moveTime", &param_.moveTime, 0.1f);
	ImGui::DragFloat("decayRate", &param_.decayRate, 0.1f);

	if (ImGui::Button("Save")) {
		JsonItems::Save(pManager_->GetName(), param_.ToJson(param_.GetName()));
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 設定時のみ行う処理
///////////////////////////////////////////////////////////////////////////////////////////////

void BossActionLeave::Build() {
	SetName("actionLeave");
	param_.FromJson(JsonItems::GetData(pManager_->GetName(), param_.GetName()));
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 初期化処理
///////////////////////////////////////////////////////////////////////////////////////////////

void BossActionLeave::OnStart() {
	actionTimer_ = 0;

	stopping_ = false;

	accel_ = pOwner_->GetTransform()->rotation_.MakeForward() * param_.moveSpeed;
	velocity_ = CVector3::ZERO;
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 更新処理
///////////////////////////////////////////////////////////////////////////////////////////////

void BossActionLeave::OnUpdate() {
	actionTimer_ += GameTimer::DeltaTime();

	if (!stopping_) {
		Leave();
	} else {
		Stop();
	}

	if (actionTimer_ > param_.moveTime) {
		stopping_ = true;
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 終了処理
///////////////////////////////////////////////////////////////////////////////////////////////

void BossActionLeave::OnEnd() {
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 次のアクションのチェック
///////////////////////////////////////////////////////////////////////////////////////////////

void BossActionLeave::CheckNextAction() {
	if (stopping_) {
		if (velocity_.Length() <= 1.0f) {
			size_t hash = pOwner_->GetAI()->AttackActionAI();
			NextAction(hash);
		}
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 入力処理
///////////////////////////////////////////////////////////////////////////////////////////////

bool BossActionLeave::IsInput() {
	return false;
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 離れる処理
///////////////////////////////////////////////////////////////////////////////////////////////

void BossActionLeave::Leave() {
	velocity_ += accel_ * GameTimer::DeltaTime();
	pOwner_->GetTransform()->MoveVelocity(velocity_* GameTimer::DeltaTime(), 0.1f);
}

void BossActionLeave::Stop() {
	velocity_ *= std::exp(-param_.decayRate * GameTimer::DeltaTime());
	pOwner_->GetTransform()->translate_ += velocity_ * GameTimer::DeltaTime();

	Quaternion playerToRotate_ = Quaternion::LookAt(pOwner_->GetPosition(), pOwner_->GetPlayerPosition());
	pOwner_->GetTransform()->rotation_ = Quaternion::Slerp(pOwner_->GetTransform()->rotation_, playerToRotate_, 0.05f);
}