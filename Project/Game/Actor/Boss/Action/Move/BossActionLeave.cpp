#include "BossActionLeave.h"
#include "Engine/Lib/Json/JsonItems.h"
#include "Game/Actor/Boss/Boss.h"

BehaviorStatus BossActionLeave::Execute() {
	return Action();
}

float BossActionLeave::EvaluateWeight() {
	return pTarget_->GetEvaluationFormula()->LeaveEvaluation(6.0f, 12.0f);
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 編集処理
///////////////////////////////////////////////////////////////////////////////////////////////

void BossActionLeave::Debug_Gui() {
	ITaskNode::Debug_Gui();
	ImGui::DragFloat("moveSpeed", &param_.moveSpeed, 0.1f);
	ImGui::DragFloat("moveTime", &param_.moveTime, 0.1f);
	ImGui::DragFloat("decayRate", &param_.decayRate, 0.1f);

	if (ImGui::Button("Save")) {
		JsonItems::Save("BossAction", param_.ToJson(param_.GetName()));
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 終了確認
///////////////////////////////////////////////////////////////////////////////////////////////

bool BossActionLeave::IsFinish() {
	if (stopping_) {
		if (velocity_.Length() <= 1.0f) {
			return true;
		}
	}
	return false;
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 実行確認
///////////////////////////////////////////////////////////////////////////////////////////////

bool BossActionLeave::CanExecute() {
	return true;
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 描画処理
///////////////////////////////////////////////////////////////////////////////////////////////

void BossActionLeave::Init() {
	param_.FromJson(JsonItems::GetData("BossAction", param_.GetName()));
	taskTimer_ = 0;

	stopping_ = false;

	accel_ = pTarget_->GetTransform()->rotation_.MakeForward() * param_.moveSpeed;
	velocity_ = CVector3::ZERO;
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 更新
///////////////////////////////////////////////////////////////////////////////////////////////

void BossActionLeave::Update() {
	taskTimer_ += GameTimer::DeltaTime();

	if (!stopping_) {
		Leave();
	} else {
		Stop();
	}

	if (taskTimer_ > param_.moveTime) {
		stopping_ = true;
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 終了処理
///////////////////////////////////////////////////////////////////////////////////////////////

void BossActionLeave::End() {
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 離れる処理
///////////////////////////////////////////////////////////////////////////////////////////////

void BossActionLeave::Leave() {
	velocity_ += accel_ * GameTimer::DeltaTime();
	pTarget_->GetTransform()->MoveVelocity(velocity_* GameTimer::DeltaTime(), 0.1f);
}

void BossActionLeave::Stop() {
	velocity_ *= std::exp(-param_.decayRate * GameTimer::DeltaTime());
	pTarget_->GetTransform()->translate_ += velocity_ * GameTimer::DeltaTime();

	Quaternion playerToRotate_ = Quaternion::LookAt(pTarget_->GetPosition(), pTarget_->GetPlayerPosition());
	pTarget_->GetTransform()->rotation_ = Quaternion::Slerp(pTarget_->GetTransform()->rotation_, playerToRotate_, 0.05f);
}