#include "BossActionShotLauncher.h"
#include "Engine/Lib/Json/JsonItems.h"
#include "Game/Actor/Boss/Boss.h"
#include "Game/Actor/Boss/Action/BossActionIdle.h"
#include "Game/Actor/Boss/Bullet/BossMissile.h"

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 編集処理
///////////////////////////////////////////////////////////////////////////////////////////////

void BossActionShotLauncher::Debug_Gui() {
	ImGui::DragFloat("bulletSpeed", &param_.bulletSpeed, .1f);
	ImGui::DragFloat("stiffenTime", &param_.stiffenTime, .1f);
	
	if (ImGui::Button("Save")) {
		JsonItems::Save(pManager_->GetName(), param_.ToJson(param_.GetName()));
	}
	if (ImGui::Button("Apply")) {
		param_.FromJson(JsonItems::GetData(pManager_->GetName(), param_.GetName()));
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 設定時のみ行う処理
///////////////////////////////////////////////////////////////////////////////////////////////

void BossActionShotLauncher::Build() {
	SetName("actionShotLauncher");
} 

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 初期化処理
///////////////////////////////////////////////////////////////////////////////////////////////

void BossActionShotLauncher::OnStart() {
	actionTimer_ = 0.0f;
	param_.FromJson(JsonItems::GetData(pManager_->GetName(), param_.GetName()));
	Shot();

	isFinish_ = true;
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 更新処理
///////////////////////////////////////////////////////////////////////////////////////////////

void BossActionShotLauncher::OnUpdate() {
	actionTimer_ += GameTimer::DeltaTime();

	if (actionTimer_ > param_.stiffenTime) {
		isFinish_ = true;
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 終了処理
///////////////////////////////////////////////////////////////////////////////////////////////

void BossActionShotLauncher::OnEnd() {
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 次のアクションへの遷移確認
///////////////////////////////////////////////////////////////////////////////////////////////

void BossActionShotLauncher::CheckNextAction() {
	if (isFinish_) {
		NextAction<BossActionIdle>();
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 入力処理
///////////////////////////////////////////////////////////////////////////////////////////////

bool BossActionShotLauncher::IsInput() {
	return false;
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ main Action
///////////////////////////////////////////////////////////////////////////////////////////////

void BossActionShotLauncher::Shot() {
	Vector3 pos = pOwner_->GetPosition();
	Vector3 velocity = (pOwner_->GetPlayerPosition() - pos).Normalize();
	pOwner_->GetBulletManager()->AddBullet<BossMissile>(pos, velocity, pOwner_->GetPlayerPosition(), param_.bulletSpeed, 0.0f, false);
}