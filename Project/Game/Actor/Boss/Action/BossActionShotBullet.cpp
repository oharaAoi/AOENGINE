#include "BossActionShotBullet.h"
#include "Game/Actor/Boss/Boss.h"
#include "Game/Actor/Boss/Bullet/BossBullet.h"
#include "Engine/Lib/Json/JsonItems.h"

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 編集処理
///////////////////////////////////////////////////////////////////////////////////////////////

void BossActionShotBullet::Debug_Gui() {
	ImGui::DragFloat("shotInterval", &param_.shotInterval, .1f);
	ImGui::DragFloat("bulletSpeed", &param_.bulletSpeed, .1f);
	ImGui::DragInt("kFireCount", &param_.kFireCount, 1);
	
	if (ImGui::Button("Save")) {
		JsonItems::Save(pManager_->GetName(), param_.ToJson(param_.GetName()));
	}
	if (ImGui::Button("Apply")) {
		param_.FromJson(JsonItems::GetData(pManager_->GetName(), param_.GetName()));
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 設定時のみ行う処理
///////////////////////////////////////////////////////////////////////////////////////////////

void BossActionShotBullet::Build() {
	SetName("actionShotBullet");
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 初期化処理
///////////////////////////////////////////////////////////////////////////////////////////////

void BossActionShotBullet::OnStart() {
	actionTimer_ = 0.0f;

	param_.FromJson(JsonItems::GetData(pManager_->GetName(), param_.GetName()));
	fireCount_ = param_.kFireCount;

	isFinishShot_ = false;
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 更新処理
///////////////////////////////////////////////////////////////////////////////////////////////

void BossActionShotBullet::OnUpdate() {
	actionTimer_ += GameTimer::DeltaTime();

	if (actionTimer_ > param_.shotInterval) {
		Shot();
		actionTimer_ = 0.0f;
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 終了処理
///////////////////////////////////////////////////////////////////////////////////////////////

void BossActionShotBullet::OnEnd() {
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 次のアクションへの遷移確認
///////////////////////////////////////////////////////////////////////////////////////////////

void BossActionShotBullet::CheckNextAction() {
	if (isFinishShot_) {
		DeleteSelf();
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 入力確認処理
///////////////////////////////////////////////////////////////////////////////////////////////

bool BossActionShotBullet::IsInput() {
	return false;
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 弾を打つ処理をする
///////////////////////////////////////////////////////////////////////////////////////////////

void BossActionShotBullet::Shot() {
	fireCount_--;

	Vector3 pos = pOwner_->GetPosition();
	Vector3 velocity = (pOwner_->GetPlayerPosition() - pos).Normalize();

	BossBullet* bullet = pOwner_->GetBulletManager()->AddBullet<BossBullet>(pos, velocity * param_.bulletSpeed);
	bullet->SetTakeDamage(10.0f);

	if (fireCount_ == 0) {
		isFinishShot_ = true;
	}
}