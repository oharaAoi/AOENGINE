#include "BossActionAllRangeMissile.h"
#include "Game/Actor/Boss/Boss.h"
#include "Game/Actor/Boss/Bullet/BossMissile.h"
#include "Game/Actor/Boss/Action/BossActionIdle.h"

#ifdef _DEBUG
void BossActionAllRangeMissile::Debug_Gui() {

}
#endif // _DEBUG

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 設定時のみ行う処理
///////////////////////////////////////////////////////////////////////////////////////////////

void BossActionAllRangeMissile::Build() {
	SetName("All Range Missile");
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 開始処理
///////////////////////////////////////////////////////////////////////////////////////////////

void BossActionAllRangeMissile::OnStart() {
	actionTimer_ = 0.f;
	playerToRotation_ = Quaternion::LookAt(pOwner_->GetPosition(), pOwner_->GetPlayerPosition());

	mainAction_ = std::bind(&BossActionAllRangeMissile::LookPlayer, this);

	isFinishShot_ = false;

	bulletSpeed_ = 40.f;
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 更新処理
///////////////////////////////////////////////////////////////////////////////////////////////

void BossActionAllRangeMissile::OnUpdate() {
	actionTimer_ += GameTimer::DeltaTime();

	mainAction_();
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 終了処理
///////////////////////////////////////////////////////////////////////////////////////////////

void BossActionAllRangeMissile::OnEnd() {
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 次のアクションのチェック
///////////////////////////////////////////////////////////////////////////////////////////////

void BossActionAllRangeMissile::CheckNextAction() {
	if (isFinishShot_) {
		NextAction<BossActionIdle>();
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 入力処理
///////////////////////////////////////////////////////////////////////////////////////////////

bool BossActionAllRangeMissile::IsInput() {
	return false;
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 弾を撃つ処理
///////////////////////////////////////////////////////////////////////////////////////////////

void BossActionAllRangeMissile::Shot() {
	if (isFinishShot_) { return; }
	Vector3 pos = pOwner_->GetTransform()->translate_;
	// Bossのforward方向を向かせる
	Vector3 dire = pOwner_->GetTransform()->rotation_.MakeForward();

	const uint32_t fireNum = 9;
	for (uint32_t oi = 0; oi < fireNum; ++oi) {
		float angle = -kHPI + (kPI * static_cast<float>(oi)) / float(fireNum - 1);
		Vector3 rotatedDir = {
			dire.x * std::cos(angle) - dire.z * std::sin(angle),
			0.0f,
			dire.x * std::sin(angle) + dire.z * std::cos(angle)
		};
		Vector3 velocity = ((dire * -1.f) * (rotatedDir)).Normalize() * bulletSpeed_;
		pOwner_->GetBulletManager()->AddBullet<BossMissile>(pos, velocity, pOwner_->GetPlayerPosition(), bulletSpeed_);
	}

	isFinishShot_ = true;
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ Playerの方向を向かせる処理
///////////////////////////////////////////////////////////////////////////////////////////////

void BossActionAllRangeMissile::LookPlayer() {
	float t = actionTimer_ / lookTime_;
	Quaternion lookRotation = Quaternion::Slerp(pOwner_->GetTransform()->GetQuaternion(), playerToRotation_, t);
	pOwner_->GetTransform()->SetQuaternion(lookRotation);

	// 次の行動に遷移する
	if (actionTimer_ > lookTime_) {
		mainAction_ = std::bind(&BossActionAllRangeMissile::Shot, this);
	}
}
