#include "BossActionShotMissile.h"
#include "Game/Actor/Boss/Boss.h"
#include "Game/Actor/Boss/Bullet/BossMissile.h"
#include "Game/Actor/Boss/Action/BossActionIdle.h"
#include "Game/UI/Boss/BossUIs.h"

void BossActionShotMissile::Debug_Gui() {
	weight_->Debug_Gui();
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 設定時のみ行う処理
///////////////////////////////////////////////////////////////////////////////////////////////

void BossActionShotMissile::Build() {
	SetName("actionShotMissle");

	weight_ = std::make_unique<BossLotteryAction>();
	weight_->Init("actionShotMissleWeight");

	size_t hash = typeid(BossActionShotMissile).hash_code();
	pOwner_->GetAI()->SetAttackWeight(hash, weight_.get());
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 初期化処理
///////////////////////////////////////////////////////////////////////////////////////////////

void BossActionShotMissile::OnStart() {
	actionTimer_ = 0.0f;
	bulletSpeed_ = 60.f;
	isFinishShot_ = false;

	fireCount_ = kFireCount_;

	shotInterval_ = 0.2f;

	// 警告を出す
	pOwner_->GetUIs()->PopAlert();
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 更新処理
///////////////////////////////////////////////////////////////////////////////////////////////

void BossActionShotMissile::OnUpdate() {
	actionTimer_ += GameTimer::DeltaTime();

	if (actionTimer_ > shotInterval_) {
		Shot();
		actionTimer_ = 0.0f;
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 終了処理
///////////////////////////////////////////////////////////////////////////////////////////////

void BossActionShotMissile::OnEnd() {
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 次のアクションへの遷移確認
///////////////////////////////////////////////////////////////////////////////////////////////

void BossActionShotMissile::CheckNextAction() {
	if (isFinishShot_) {
		NextAction<BossActionIdle>();
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 入力確認処理
///////////////////////////////////////////////////////////////////////////////////////////////

bool BossActionShotMissile::IsInput() {
	return false;
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 弾を打つ処理をする
///////////////////////////////////////////////////////////////////////////////////////////////

void BossActionShotMissile::Shot() {
	fireCount_--;

	Vector3 pos = pOwner_->GetTransform()->translate_;
	Vector3 forward = pOwner_->GetTransform()->rotation_.MakeForward();
	Vector3 up = pOwner_->GetTransform()->rotation_.MakeUp(); // Y軸に限らず回転軸として使う

	Vector3 velocity = forward.Normalize() * bulletSpeed_;
	BossMissile* missile = pOwner_->GetBulletManager()->AddBullet<BossMissile>(pos, velocity, pOwner_->GetPlayerPosition(), bulletSpeed_, 0.5f, true);
	missile->SetTakeDamage(20.0f);

	if (fireCount_ == 0) {
		isFinishShot_ = true;
	}
}