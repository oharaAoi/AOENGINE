#include "BossActionDeployArmor.h"
#include "Engine/Lib/Json/JsonItems.h"
#include "Engine/Lib/Math/MyRandom.h"
#include "Game/Actor/Boss/Boss.h"
#include "Game/Actor/Boss/State/BossStateDeployArmor.h"

BossActionDeployArmor::BossActionDeployArmor() {
	isDeploy_ = false;
}

BehaviorStatus BossActionDeployArmor::Execute() {
	return Action();
}

float BossActionDeployArmor::EvaluateWeight() {
	return 1.0f;
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 編集処理
///////////////////////////////////////////////////////////////////////////////////////////////

void BossActionDeployArmor::Debug_Gui() {
	ITaskNode::Debug_Gui();
	param_.Debug_Gui();
}

void BossActionDeployArmor::Parameter::Debug_Gui() {
	ImGui::DragFloat("deployTime", &deployTime, 0.1f);
	ImGui::DragFloat("coolTime", &coolTime, 0.1f);
	SaveAndLoad();
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 終了確認
//////////////////////////////////////////////////////////////////////////////////////////////

bool BossActionDeployArmor::IsFinish() {
	if (taskTimer_ >= param_.deployTime) {
		return true;
	}
	return false;
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 実行確認
///////////////////////////////////////////////////////////////////////////////////////////////

bool BossActionDeployArmor::CanExecute() {
	if (pTarget_->GetState()->GetStateName() == "DeployArmorState") {
		return false;
	}

	if (pTarget_->GetPhase() == BossPhase::FIRST) {
		if (isDeploy_) {
			return false;
		}
	}
	return true;
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 初期化処理
///////////////////////////////////////////////////////////////////////////////////////////////

void BossActionDeployArmor::Init() {
	param_.SetGroupName("BossAction");
	param_.Load();
	taskTimer_ = 0.0f;
	isDeploy_ = true;
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 更新処理
///////////////////////////////////////////////////////////////////////////////////////////////

void BossActionDeployArmor::Update() {
	taskTimer_ += GameTimer::DeltaTime();
	pTarget_->GetTransform()->temporaryTranslate_ = RandomVector3(Vector3(-2.0f, -2.0f, -2.0f), Vector3(2.0f, 2.0f, 2.0f));
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 終了処理
///////////////////////////////////////////////////////////////////////////////////////////////

void BossActionDeployArmor::End() {
	pTarget_->GetState()->ChangeState<BossStateDeployArmor>();
	pTarget_->SetIsArmorDeploy(false);
	coolTime_ = param_.coolTime;
}