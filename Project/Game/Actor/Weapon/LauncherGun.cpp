#include "LauncherGun.h"
#include "Engine/System/Manager/ParticleManager.h"
#include "Engine/Render/SceneRenderer.h"

void LauncherGun::Finalize() {
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 編集
///////////////////////////////////////////////////////////////////////////////////////////////
#ifdef _DEBUG
void LauncherGun::Debug_Gui() {
	transform_->Debug_Gui();

	BaseWeapon::Debug_Gui();
}
#endif // _DEBUG

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 初期化
///////////////////////////////////////////////////////////////////////////////////////////////

void LauncherGun::Init() {
	BaseWeapon::Init();
	SetObject("launcher.obj");
	SetName("LauncherGun");

	transform_->translate_ = { -1.2f, 1.1f, 0.0f };

	// -------------------------------------------------
	// ↓ Effect関連
	// -------------------------------------------------

	gunFireParticles_ = ParticleManager::GetInstance()->CrateParticle("gunFireParticles");

	SceneRenderer::GetInstance()->SetObject(Object3dPSO::Normal, this);

#ifdef _DEBUG
	EditerWindows::AddObjectWindow(this, GetName());
#endif // _DEBUG
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 更新
///////////////////////////////////////////////////////////////////////////////////////////////

void LauncherGun::Update() {
	gunFireParticles_->Update();
	BaseWeapon::Update();
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 描画
///////////////////////////////////////////////////////////////////////////////////////////////

void LauncherGun::Draw() const {
	BaseWeapon::Draw();
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 弾を撃つ
///////////////////////////////////////////////////////////////////////////////////////////////
 
void LauncherGun::Shot(const Vector3& targetPos) {
	Vector3 dire = (targetPos - GetPosition()).Normalize();
	pBulletManager_->AddBullet(worldPos_, dire * speed_);
	// effectを出す
	Vector3 pos = worldPos_;
	pos += (dire * 4.f);
	gunFireParticles_->SetPos(pos);
	gunFireParticles_->SetIsStop(false);
}