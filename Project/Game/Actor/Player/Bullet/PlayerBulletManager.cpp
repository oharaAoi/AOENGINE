#include "PlayerBulletManager.h"

PlayerBulletManager::~PlayerBulletManager() {
	bulletList_.clear();
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 初期化
///////////////////////////////////////////////////////////////////////////////////////////////

void PlayerBulletManager::Init() {
	bulletList_.clear();
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 更新処理
///////////////////////////////////////////////////////////////////////////////////////////////

void PlayerBulletManager::Update() {
	// フラグがfalseになったら削除
	std::erase_if(bulletList_, [](const std::unique_ptr<PlayerBullet>& bullet) {
		return !bullet->GetIsAlive();
				  });

	for (std::unique_ptr<PlayerBullet>& bullet : bulletList_) {
		bullet->Update();
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 描画
///////////////////////////////////////////////////////////////////////////////////////////////

void PlayerBulletManager::Draw() const {
	
}

PlayerBullet* PlayerBulletManager::SearchCollider(ICollider* collider) {
	for (std::unique_ptr<PlayerBullet>& bullet : bulletList_) {
		if (bullet->GetCollider() == collider) {
			return bullet.get();
		}
	}

	return nullptr;
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 弾を追加する
///////////////////////////////////////////////////////////////////////////////////////////////

PlayerBullet* PlayerBulletManager::AddBullet(const Vector3& pos, const Vector3& velocity, uint32_t type) {
	auto& bullet = bulletList_.emplace_back(std::make_unique<PlayerBullet>());
	bullet->Init();
	bullet->Reset(pos, velocity);
	bullet->SetType(type);
	return bullet.get();
}
