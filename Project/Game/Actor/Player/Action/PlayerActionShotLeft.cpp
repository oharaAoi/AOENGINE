#include "PlayerActionShotLeft.h"
#include "Game/Actor/Player/Player.h"
#include "Game/Actor/Player/Action/PlayerActionIdle.h"
// Engine
#include "Engine/Lib/GameTimer.h"

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 設定時のみ行う処理
///////////////////////////////////////////////////////////////////////////////////////////////

void PlayerActionShotLeft::Build() {
	SetName("actionShotLeft");
	pInput_ = Input::GetInstance();
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 初期化
///////////////////////////////////////////////////////////////////////////////////////////////

void PlayerActionShotLeft::OnStart() {
	notShotTimer_ = 0.0f;

	AnimationClip* clip = pOwner_->GetGameObject()->GetAnimetor()->GetAnimationClip();
	clip->PoseToAnimation("left_shot", 0.2f);
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 更新
///////////////////////////////////////////////////////////////////////////////////////////////

void PlayerActionShotLeft::OnUpdate() {
	Shot();
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 終了
//////////////////////////////////////////////////////////////////////////////////////////////

void PlayerActionShotLeft::OnEnd() {
	AnimationClip* clip = pOwner_->GetGameObject()->GetAnimetor()->GetAnimationClip();
	clip->PoseToAnimation("left_shotAfter", 0.2f);
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 次に行うアクションの判定
//////////////////////////////////////////////////////////////////////////////////////////////

void PlayerActionShotLeft::CheckNextAction() {
	// ボタンを押して入なかったら待機状態に行く
	if (notShotTimer_ >= notShotTime_) {
		NextAction<PlayerActionIdle>();
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 入力処理
///////////////////////////////////////////////////////////////////////////////////////////////

bool PlayerActionShotLeft::IsInput() {
	if (pInput_->IsTriggerButton(XInputButtons::L_SHOULDER)) {
		return true;
	}
	return false;
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ main action
///////////////////////////////////////////////////////////////////////////////////////////////

void PlayerActionShotLeft::Shot() {
	// 長押しで反応するようにする
	if (pInput_->IsPressButton(XInputButtons::L_SHOULDER)) {
		// shotを放つ
		if (pOwner_->GetIsLockOn()) {
			Vector3 dire = (pOwner_->GetTargetPos() - pOwner_->GetPosition()).Normalize();
			pOwner_->Attack(PlayerWeapon::LEFT_WEAPON, AttackContext(dire, CVector3::ZERO));
		} else {
			Vector3 dire = pOwner_->GetTransform()->srt_.rotate.MakeForward();
			pOwner_->Attack(PlayerWeapon::LEFT_WEAPON, AttackContext(dire, CVector3::ZERO));
		}

		notShotTimer_ = 0.0f;
	} else {
		// ボタンを押していない時間を計測
		notShotTimer_ += GameTimer::DeltaTime();
	}
}
