#include "PlayerActionTurnAround.h"
#include "Engine/Lib/Json/JsonItems.h"
#include "Game/Actor/Player/Player.h"
#include "Game/Actor/Player/Action/PlayerActionMove.h"

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 設定時のみ行う処理
///////////////////////////////////////////////////////////////////////////////////////////////

void PlayerActionTurnAround::Build() {
	SetName("actionTurnAround");
	param_.FromJson(JsonItems::GetData("PlayerAction", param_.GetName()));
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 初期化
///////////////////////////////////////////////////////////////////////////////////////////////

void PlayerActionTurnAround::OnStart() {
	actionTimer_ = 0;
	speed_ = context_->Get<float>("speed");

	Vector2 current = Input::GetInstance()->GetLeftJoyStick(kDeadZone_).Normalize();
	direction_ = pOwner_->GetFollowCamera()->GetAngleX().Rotate(Vector3{ current.x, 0.0f, current.y });
	float angle = std::atan2f(direction_.x, direction_.z);

	prevRotate_ = pOwner_->GetTransform()->rotation_;
	targetRotate_ = Quaternion::AngleAxis(angle, CVector3::UP);
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 更新処理
///////////////////////////////////////////////////////////////////////////////////////////////

void PlayerActionTurnAround::OnUpdate() {
	actionTimer_ += GameTimer::DeltaTime();

	float t = actionTimer_ / param_.rotateTime;
	pOwner_->GetTransform()->rotation_ = Quaternion::Slerp(prevRotate_, targetRotate_, t);
	pOwner_->GetTransform()->translate_ += direction_ * speed_ * GameTimer::DeltaTime();
	speed_ *= 0.9f;
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 終了
///////////////////////////////////////////////////////////////////////////////////////////////

void PlayerActionTurnAround::OnEnd() {

}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 次に行うアクションの判定
///////////////////////////////////////////////////////////////////////////////////////////////

void PlayerActionTurnAround::CheckNextAction() {
	if (actionTimer_ >= param_.rotateTime) {
		NextAction<PlayerActionMove>();
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 入力処理
///////////////////////////////////////////////////////////////////////////////////////////////

bool PlayerActionTurnAround::IsInput() {
	return false;
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ main action
///////////////////////////////////////////////////////////////////////////////////////////////

void PlayerActionTurnAround::Debug_Gui() {
	ImGui::DragFloat("speed", &param_.speed, 0.1f);
	ImGui::DragFloat("rotateTime", &param_.rotateTime, 0.1f);
	if (ImGui::Button("Save")) {
		JsonItems::Save("PlayerAction", param_.ToJson(param_.GetName()));
	}
	if (ImGui::Button("Apply")) {
		param_.FromJson(JsonItems::GetData("PlayerAction", param_.GetName()));
	}
}