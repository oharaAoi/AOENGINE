#include "PlayerActionBoost.h"
#include "Game/Actor/Player/Player.h"
#include "Game/Actor/Player/Action/PlayerActionMove.h"
#include "Engine/Lib/Json/JsonItems.h"

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 編集処理
///////////////////////////////////////////////////////////////////////////////////////////////

void PlayerActionBoost::Debug_Gui() {
	initialPram_.Debug_Gui();
}

void PlayerActionBoost::Parameter::Debug_Gui() {
	ImGui::DragFloat("chargeTime", &chargeTime, .1f);
	ImGui::DragFloat("chargeForce", &chargeForce, .1f);
	ImGui::DragFloat("boostForce", &boostForce, .1f);
	ImGui::DragFloat("stopForce", &stopForce, .1f);
	SaveAndLoad();
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 設定時のみ行う処理
///////////////////////////////////////////////////////////////////////////////////////////////

PlayerActionBoost::~PlayerActionBoost() {
	blur_.reset();
}

void PlayerActionBoost::Build() {
	SetName("actionBoost");
	pInput_ = Input::GetInstance();
	pOwnerTransform_ = pOwner_->GetTransform();

	initialPram_.SetGroupName(pManager_->GetName());
	initialPram_.Load();

	blur_ = Engine::GetPostProcess()->GetRadialBlur();
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 初期化
///////////////////////////////////////////////////////////////////////////////////////////////

void PlayerActionBoost::OnStart() {
	param_ = initialPram_;

	stick_ = pInput_->GetLeftJoyStick();
	direction_ = pOwner_->GetFollowCamera()->GetAngleX().Rotate(Vector3{ stick_.x, 0.0f, stick_.y });

	acceleration_ = direction_ * param_.boostForce;
	velocity_ = { 0.0f, 0.0f, 0.0f };

	timer_ = .0f;
	finishBoost_ = false;

	mainAction_ = std::bind(&PlayerActionBoost::BoostCharge, this);
	pOwner_->GetJetEngine()->JetIsStart();
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 更新
///////////////////////////////////////////////////////////////////////////////////////////////

void PlayerActionBoost::OnUpdate() {

	mainAction_();

	if (!finishBoost_) {
		if (CheckStop()) {
			mainAction_ = std::bind(&PlayerActionBoost::BoostStop, this);
			finishBoost_ = true;

			blur_->Stop();
		}
	}
	pOwner_->UpdateJoint();
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 終了
///////////////////////////////////////////////////////////////////////////////////////////////

void PlayerActionBoost::OnEnd() {
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 次に行うアクションの判定
///////////////////////////////////////////////////////////////////////////////////////////////

void PlayerActionBoost::CheckNextAction() {
	if (finishBoost_) {
		if (velocity_.Length() < 0.1f) {
			NextAction<PlayerActionMove>();
		}
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 入力処理
///////////////////////////////////////////////////////////////////////////////////////////////

bool PlayerActionBoost::IsInput() {
	if (pInput_->IsTriggerButton(XInputButtons::LSTICK_THUMB)) {
		return true;
	}
	return false;
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ main action
///////////////////////////////////////////////////////////////////////////////////////////////

void PlayerActionBoost::Boost() {
	direction_ = pOwner_->GetFollowCamera()->GetAngleX().MakeForward();
	acceleration_ = direction_ * param_.boostForce;

	velocity_ += acceleration_ * GameTimer::DeltaTime();
	pOwnerTransform_->srt_.translate += velocity_;
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ boostCharge
///////////////////////////////////////////////////////////////////////////////////////////////

void PlayerActionBoost::BoostCharge() {
	timer_ += GameTimer::DeltaTime();

	if (timer_ < param_.chargeTime) {
		Vector3 backDirection = pOwner_->GetTransform()->srt_.rotate.MakeForward();
		acceleration_ = (backDirection.Normalize() * -1.0f) * param_.boostForce;
		velocity_ += acceleration_ * GameTimer::DeltaTime();
		pOwnerTransform_->srt_.translate += velocity_;
	} else {
		mainAction_ = std::bind(&PlayerActionBoost::Boost, this);
		blur_->Start(1.f, 2.0f);
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ ブーストの中止
///////////////////////////////////////////////////////////////////////////////////////////////

void PlayerActionBoost::BoostStop() {
	velocity_ *= param_.stopForce;
	pOwnerTransform_->srt_.translate += velocity_;
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 中止確認
///////////////////////////////////////////////////////////////////////////////////////////////

bool PlayerActionBoost::CheckStop() {
	stick_ = Input::GetInstance()->GetLeftJoyStick(kDeadZone_).Normalize();
	if (stick_.y < -0.1f) {
		return true;
	}

	if (pInput_->IsTriggerButton(XInputButtons::BUTTON_B)) {
		return true;
	}

	return false;
}
