#include "PlayerActionJump.h"
#include "Game/Actor/Player/Player.h"
#include "Game/Actor/Player/Action/PlayerActionIdle.h"
// Engine
#include "Engine/System/Input/Input.h"

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 設定時のみ行う処理
///////////////////////////////////////////////////////////////////////////////////////////////

void PlayerActionJump::Build() {
	SetName("actionJump");
	pOwnerTransform_ = pOwner_->GetTransform();
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 初期化
///////////////////////////////////////////////////////////////////////////////////////////////

void PlayerActionJump::OnStart() {
	// actionを起こす
	Jump();
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 更新
///////////////////////////////////////////////////////////////////////////////////////////////

void PlayerActionJump::OnUpdate() {
	// 重力を適用させる
	ApplyGravity();
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 終了
//////////////////////////////////////////////////////////////////////////////////////////////

void PlayerActionJump::OnEnd() {
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 次に行うアクションの判定
//////////////////////////////////////////////////////////////////////////////////////////////

void PlayerActionJump::CheckNextAction() {
	if (pOwnerTransform_->translate_.y <= 0.0f) {
		NextAction<PlayerActionIdle>();
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 入力処理
///////////////////////////////////////////////////////////////////////////////////////////////

bool PlayerActionJump::IsInput() {
	if (Input::GetInstance()->GetIsPadTrigger(XInputButtons::BUTTON_A)) {
		return true;
	}
	return false;
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ main action
///////////////////////////////////////////////////////////////////////////////////////////////

void PlayerActionJump::Jump() {
	velocity_.y = 10.0f;
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 重力の適用
///////////////////////////////////////////////////////////////////////////////////////////////

void PlayerActionJump::ApplyGravity() {
	velocity_ += acceleration_ * GameTimer::DeltaTime();
	pOwnerTransform_->translate_ += velocity_ * GameTimer::DeltaTime();
}
