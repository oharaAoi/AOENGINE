#include "PlayerActionRightShoulder.h"
#include "Game/Actor/Player/Player.h"
#include "Game/Actor/Player/Action/PlayerActionIdle.h"

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 設定時のみ行う処理
///////////////////////////////////////////////////////////////////////////////////////////////
void PlayerActionRightShoulder::Build() {
	SetName("ActionRightShoulder");
	pInput_ = Input::GetInstance();
	pWeapon_ = dynamic_cast<ShoulderMissile*>(pOwner_->GetWeapon(PlayerWeapon::RIGHT_SHOULDER));
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 初期化処理
///////////////////////////////////////////////////////////////////////////////////////////////

void PlayerActionRightShoulder::OnStart() {
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 更新処理
///////////////////////////////////////////////////////////////////////////////////////////////

void PlayerActionRightShoulder::OnUpdate() {
	Shot();

	// ----------------------
	// 向き更新
	// ----------------------
	pOwner_->LookTarget(1.0f, pOwner_->GetReticle()->GetLockOn());

	isFinish_ = true;
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 終了処理
///////////////////////////////////////////////////////////////////////////////////////////////

void PlayerActionRightShoulder::OnEnd() {

}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 次のアクションの確認
///////////////////////////////////////////////////////////////////////////////////////////////

void PlayerActionRightShoulder::CheckNextAction() {
	if (isFinish_) {
		DeleteSelf();
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 入力確認
///////////////////////////////////////////////////////////////////////////////////////////////

bool PlayerActionRightShoulder::IsInput() {
	if (pInput_->IsTriggerButton(XInputButtons::RT_SHOULDER)) {
		return true;
	}
	return false;
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 編集処理
///////////////////////////////////////////////////////////////////////////////////////////////

void PlayerActionRightShoulder::Debug_Gui() {
}

void PlayerActionRightShoulder::Shot() {
	if (pOwner_->GetIsLockOn()) {
		pWeapon_->Attack(AttackContext(CVector3::ZERO, pOwner_->GetTargetPos()));
	} else {
		Vector3 dire = pOwner_->GetTransform()->srt_.rotate.MakeForward() * 50.0f;
		pWeapon_->Attack(AttackContext(CVector3::ZERO, dire));
	}
}
