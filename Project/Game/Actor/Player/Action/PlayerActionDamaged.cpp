#include "PlayerActionDamaged.h"
#include "Game/Actor/Player/Player.h"

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 設定時のみ行う処理
///////////////////////////////////////////////////////////////////////////////////////////////

void PlayerActionDamaged::Build() {
	SetName("actionDamaged");
	pOwnerTransform_ = pOwner_->GetTransform();
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 初期化
///////////////////////////////////////////////////////////////////////////////////////////////

void PlayerActionDamaged::OnStart() {
	actionTimer_ += GameTimer::DeltaTime();
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 更新
///////////////////////////////////////////////////////////////////////////////////////////////

void PlayerActionDamaged::OnUpdate() {
	ApplyGravity();
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 終了
//////////////////////////////////////////////////////////////////////////////////////////////

void PlayerActionDamaged::OnEnd() {
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 次に行うアクションの判定
//////////////////////////////////////////////////////////////////////////////////////////////

void PlayerActionDamaged::CheckNextAction() {
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 入力処理
///////////////////////////////////////////////////////////////////////////////////////////////

bool PlayerActionDamaged::IsInput() {
	return false;
}

void PlayerActionDamaged::ApplyGravity() {
	if (pOwnerTransform_->translate_.y > 2.0f) {
		acceleration_.y += kGravity * GameTimer::DeltaTime();
		acceleration_.y = std::clamp(acceleration_.y, -50.f, 50.f);

		velocity_ += acceleration_ * GameTimer::DeltaTime();
		pOwnerTransform_->translate_ += velocity_ * GameTimer::DeltaTime();
	}
}
