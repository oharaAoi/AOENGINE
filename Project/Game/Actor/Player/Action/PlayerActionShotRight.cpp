#include "PlayerActionShotRight.h"
#include "Game/Actor/Player/Player.h"
#include "Game/Actor/Player/Action/PlayerActionIdle.h"
// Engine
#include "Engine/Lib/GameTimer.h"

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 設定時のみ行う処理
///////////////////////////////////////////////////////////////////////////////////////////////

void PlayerActionShotRight::Build() {
	SetName("actionShotRight");
	pInput_ = Input::GetInstance();
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 初期化
///////////////////////////////////////////////////////////////////////////////////////////////

void PlayerActionShotRight::OnStart() {
	shotTimer_ = 0.0f;
	notShotTimer_ = 0.0f;

	pOwner_->GetGameObject()->GetAnimetor()
		->GetAnimationClip()->PoseToAnimation("right_shot", 0.2f);
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 更新
///////////////////////////////////////////////////////////////////////////////////////////////

void PlayerActionShotRight::OnUpdate() {
	Shot();
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 終了
//////////////////////////////////////////////////////////////////////////////////////////////

void PlayerActionShotRight::OnEnd() {
	AnimationClip* clip = pOwner_->GetGameObject()->GetAnimetor()->GetAnimationClip();
	clip->PoseToAnimation("right_shotAfter", 0.2f);
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 次に行うアクションの判定
//////////////////////////////////////////////////////////////////////////////////////////////

void PlayerActionShotRight::CheckNextAction() {
	// ボタンを押して入なかったら待機状態に行く
	if (notShotTimer_ >= notShotTime_) {
		NextAction<PlayerActionIdle>();
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ 入力処理
///////////////////////////////////////////////////////////////////////////////////////////////

bool PlayerActionShotRight::IsInput() {
	if (pInput_->IsTriggerButton(XInputButtons::R_SHOULDER)) {
		return true;
	}
	return false;
}

///////////////////////////////////////////////////////////////////////////////////////////////
// ↓ main action
///////////////////////////////////////////////////////////////////////////////////////////////

void PlayerActionShotRight::Shot() {
	// timerがゼロでなかったら新たに弾を撃たないようにして早期リターンする
	if (shotTimer_ > 0.0f) {
		shotTimer_ -= GameTimer::DeltaTime();
		return;
	} else {
		shotTimer_ = 0.0f;
	}

	// 長押しで反応するようにする
	if (pInput_->IsPressButton(XInputButtons::R_SHOULDER)) {
		// shotを放つ
		if (pOwner_->GetIsLockOn()) {
			Vector3 dire = (pOwner_->GetTargetPos() - pOwner_->GetPosition()).Normalize();
			pOwner_->GetWeapon(PlayerWeapon::RIGHT_WEAPON)->Attack(AttackContext(dire, CVector3::ZERO));
		} else {
			Vector3 dire = pOwner_->GetTransform()->rotation_.MakeForward();
			pOwner_->GetWeapon(PlayerWeapon::RIGHT_WEAPON)->Attack(AttackContext(dire, CVector3::ZERO));
		}

		// coolTimeの設定
		shotTimer_ = shotCoolTime_;
		notShotTimer_ = 0.0f;
	} else {
		// ボタンを押していない時間を計測
		notShotTimer_ += GameTimer::DeltaTime();
	}
}
